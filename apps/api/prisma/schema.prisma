// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Language {
  ENGLISH
  INDONESIA
}

enum Currency {
  IDR
  USD
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  email      String   @unique
  password   String?
  pictureUrl String?
  currency   Currency @default(IDR)
  language   Language @default(ENGLISH)

  accountProvider AccountProvider

  tenant   Tenant?
  customer Customer?

  wallet Wallet?
}

enum AccountProvider {
  CREDENTIALS
  GOOGLE
}

model VerificationToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model Tenant {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  properties Property[]
}

model Customer {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  bookings Booking[]
  reviews  Review[]
}

model Property {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  address     String
  description String   @db.VarChar(1000)
  pictureUrl  String
  room        Room[]
  reviews     Review[]

  location Location?

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([name, address], name: "uniqueProperty")
}

model Location {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lat       Float
  lng       Float

  propertyId String   @unique
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Room {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type         String
  description  String @db.VarChar(1000)
  pictureUrl   String
  price        Int
  roomCapacity Int

  bookings Booking[]

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([type, propertyId], name: "uniqueRoom")
}

model Booking {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startDate DateTime
  endDate   DateTime

  bookingNumber String        @unique
  paymentStatus PaymentStatus

  review Review[]

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([startDate, endDate, roomId, bookingNumber], name: "uniqueBooking")
}

enum PaymentStatus {
  PENDING
  PAID
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId String
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  propertyId String
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  review String
  star   Int

  @@unique([customerId, propertyId], name: "uniqueReview")
}

model Wallet {
  id        String   @id
  user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
  balance   Float
  points    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
